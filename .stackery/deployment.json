{"stack":"AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nResources:\n  UserPool:\n    Type: AWS::Cognito::UserPool\n    Properties:\n      AdminCreateUserConfig:\n        AllowAdminCreateUserOnly: true\n      UserPoolName: !Sub ${AWS::StackName}-UserPool\n      UsernameAttributes:\n        - email\n      LambdaConfig:\n        PreAuthentication: !GetAtt cognitoTriggered.Arn\n        PostConfirmation: !GetAtt cognitoTriggered.Arn\n        PostAuthentication: !GetAtt cognitoTriggered.Arn\n        CustomMessage: !GetAtt cognitoTriggered.Arn\n        PreSignUp: !GetAtt cognitoTriggered.Arn\n  UserPoolClient:\n    Type: AWS::Cognito::UserPoolClient\n    Properties:\n      ClientName: clowder\n      GenerateSecret: false\n      UserPoolId: !Ref UserPool\n      ExplicitAuthFlows:\n        - ADMIN_NO_SRP_AUTH\n  CDN:\n    Type: AWS::CloudFront::Distribution\n    Properties:\n      DistributionConfig:\n        DefaultCacheBehavior:\n          Compress: true\n          ForwardedValues:\n            Cookies:\n              Forward: none\n            QueryString: false\n          TargetOriginId: StackeryCDN\n          ViewerProtocolPolicy: redirect-to-https\n        DefaultRootObject: index.html\n        Enabled: true\n        PriceClass: PriceClass_100\n        Origins:\n          - DomainName: !GetAtt SiteBucket.DomainName\n            Id: StackeryCDN\n            S3OriginConfig:\n              OriginAccessIdentity: !Sub\n                - origin-access-identity/cloudfront/${OriginAccessIdentity}\n                - OriginAccessIdentity: !Ref CDNOriginAccessIdentity\n  CDNOriginAccessIdentity:\n    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n    Properties:\n      CloudFrontOriginAccessIdentityConfig:\n        Comment: Stackery\n  CDNBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket: !Ref SiteBucket\n      PolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CDNOriginAccessIdentity}\n            Action: s3:GetObject\n            Resource: !Sub\n              - ${BucketArn}/*\n              - BucketArn: !GetAtt SiteBucket.Arn\n  deployer:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub ${AWS::StackName}-deployer\n      Description: !Sub\n        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}\n        - ResourceName: deployer\n      CodeUri: src/deployer\n      Handler: index.handler\n      Runtime: nodejs12.x\n      MemorySize: 3008\n      Timeout: 300\n      Tracing: Active\n      Policies:\n        - AWSXrayWriteOnlyAccess\n        - S3CrudPolicy:\n            BucketName: !Ref SiteBucket\n      Environment:\n        Variables:\n          BUCKET_NAME: !Ref SiteBucket\n          BUCKET_ARN: !GetAtt SiteBucket.Arn\n          XDG_CONFIG_HOME: /tmp/.config\n  deployerDeployTrigger:\n    Type: Custom::FunctionDeployTrigger\n    Properties:\n      ServiceToken: !GetAtt deployer.Arn\n      DeploymentTimestamp: !Ref DeploymentTimestamp\n  authenticator:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub ${AWS::StackName}-authenticator\n      Description: !Sub\n        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}\n        - ResourceName: authenticator\n      CodeUri: src/authenticator\n      Handler: index.handler\n      Runtime: nodejs12.x\n      MemorySize: 3008\n      Timeout: 30\n      Tracing: Active\n      Policies:\n        - AWSXrayWriteOnlyAccess\n        - Statement:\n            - Effect: Allow\n              Action:\n                - cognito-idp:Admin*\n                - cognito-idp:DescribeIdentityProvider\n                - cognito-idp:DescribeResourceServer\n                - cognito-idp:DescribeUserPool\n                - cognito-idp:DescribeUserPoolClient\n                - cognito-idp:DescribeUserPoolDomain\n                - cognito-idp:GetGroup\n                - cognito-idp:ListGroups\n                - cognito-idp:ListUserPoolClients\n                - cognito-idp:ListUsers\n                - cognito-idp:ListUsersInGroup\n                - cognito-idp:UpdateGroup\n              Resource: !GetAtt UserPool.Arn\n      Environment:\n        Variables:\n          USER_POOL_CLIENT_ID: !Ref UserPoolClient\n          USER_POOL_ID: !Ref UserPool\n          USER_POOL_ARN: !GetAtt UserPool.Arn\n  SiteBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${AWS::StackName}-sitebucke-${AWS::AccountId}\n      WebsiteConfiguration:\n        IndexDocument: index.html\n  Queue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub ${AWS::StackName}-Queue\n  KittyBox:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      BillingMode: PAY_PER_REQUEST\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      StreamSpecification:\n        StreamViewType: NEW_AND_OLD_IMAGES\n      TableName: !Sub ${AWS::StackName}-KittyBox\n  PurrioGQL:\n    Type: AWS::AppSync::GraphQLApi\n    Properties:\n      Name: !Sub\n        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}\n        - ResourceName: PurrioGQL\n      AuthenticationType: AWS_IAM\n      LogConfig:\n        FieldLogLevel: ERROR\n        CloudWatchLogsRoleArn: !GetAtt PurrioGQLLogsRole.Arn\n  PurrioGQLSchema:\n    Type: AWS::AppSync::GraphQLSchema\n    Properties:\n      ApiId: !GetAtt PurrioGQL.ApiId\n      DefinitionS3Location: Graphql/schema.graphql\n  PurrioGQLLogsRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          Effect: Allow\n          Principal:\n            Service: appsync.amazonaws.com\n          Action: sts:AssumeRole\n      RoleName: !Sub ${AWS::StackName}-PurrioGQL-logs\n      Policies:\n        - PolicyName: Log\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Resource:\n                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*\n                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*:log-stream:*\n  PurrioGQLQuerygetJobResolver:\n    Type: AWS::AppSync::Resolver\n    Properties:\n      TypeName: Query\n      DataSourceName: !GetAtt PurrioGQLToKittyBoxDataSource.Name\n      RequestMappingTemplateS3Location: Graphql/Query-getJob-request.vm\n      ResponseMappingTemplateS3Location: Graphql/Query-getJob-response.vm\n      ApiId: !GetAtt PurrioGQL.ApiId\n      FieldName: getJob\n    DependsOn: PurrioGQLSchema\n  PurrioGQLQuerylistJobsResolver:\n    Type: AWS::AppSync::Resolver\n    Properties:\n      TypeName: Query\n      DataSourceName: !GetAtt PurrioGQLToKittyBoxDataSource.Name\n      RequestMappingTemplateS3Location: Graphql/Query-listJobs-request.vm\n      ResponseMappingTemplateS3Location: Graphql/Query-listJobs-response.vm\n      ApiId: !GetAtt PurrioGQL.ApiId\n      FieldName: listJobs\n    DependsOn: PurrioGQLSchema\n  PurrioGQLMutationputJobResolver:\n    Type: AWS::AppSync::Resolver\n    Properties:\n      TypeName: Mutation\n      DataSourceName: !GetAtt PurrioGQLToKittyBoxDataSource.Name\n      RequestMappingTemplateS3Location: Graphql/Mutation-putJob-request.vm\n      ResponseMappingTemplateS3Location: Graphql/Mutation-putJob-response.vm\n      ApiId: !GetAtt PurrioGQL.ApiId\n      FieldName: putJob\n    DependsOn: PurrioGQLSchema\n  PurrioGQLToKittyBoxDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      Type: AMAZON_DYNAMODB\n      ServiceRoleArn: !GetAtt PurrioGQLToKittyBoxAccessRole.Arn\n      ApiId: !GetAtt PurrioGQL.ApiId\n      Name: KittyBox\n      DynamoDBConfig:\n        TableName: !Ref KittyBox\n        AwsRegion: !Ref AWS::Region\n  PurrioGQLToKittyBoxAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          Effect: Allow\n          Principal:\n            Service: appsync.amazonaws.com\n          Action: sts:AssumeRole\n      RoleName: !Sub ${AWS::StackName}-PurrioGQL-to-KittyBox\n      Policies:\n        - PolicyName: Access\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:PutItem\n                  - dynamodb:DeleteItem\n                  - dynamodb:UpdateItem\n                  - dynamodb:Query\n                  - dynamodb:Scan\n                  - dynamodb:BatchGetItem\n                  - dynamodb:BatchWriteItem\n                Resource:\n                  - !GetAtt KittyBox.Arn\n                  - !Sub ${KittyBox.Arn}/index/*\n  cognitoTriggered:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub ${AWS::StackName}-cognitoTriggered\n      Description: !Sub\n        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}\n        - ResourceName: cognitoTriggered\n      CodeUri: src/cognitoTriggered\n      Handler: index.handler\n      Runtime: nodejs12.x\n      MemorySize: 3008\n      Timeout: 30\n      Tracing: Active\n      Policies:\n        - AWSXrayWriteOnlyAccess\n  UserPoolTocognitoTriggeredPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: !GetAtt cognitoTriggered.Arn\n      Principal: cognito-idp.amazonaws.com\n      Action: lambda:InvokeFunction\n      SourceArn: !GetAtt UserPool.Arn\nParameters:\n  StackTagName:\n    Type: String\n    Description: Stack Name (injected by Stackery at deployment time)\n  EnvironmentTagName:\n    Type: String\n    Description: Environment Name (injected by Stackery at deployment time)\n  DeploymentTimestamp:\n    Type: Number\n    Description: Deployment preparation timestamp in milliseconds Since Epoch (injected by Stackery at deployment time)\n"}
