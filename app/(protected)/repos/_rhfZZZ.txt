"use client";

import React from "react";
import { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";

import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
///import { addEntry } from '@/app/_actions'
import { addEntry, fetchGeoTypes } from "./_actions";
import { FormDataSchema } from "./schema";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

// const FormDataSchema = z.object({
//   name: z.string().nonempty('Name is required.'),
//   geo_type: z.string().nonempty('geo_type is required'),
//   message: z
//     .string()
//     .nonempty('Message is required.')
//     .min(6, { message: 'Message must be at least 6 characters.' })
// })

///
///

type Inputs = z.infer<typeof FormDataSchema>;

export default function RhfWithAction({
  geotypes,
  hostnames,
}: {
  geotypes: string[];
  hostnames: string[];
}) {
  // console.log("xxxxxxxxxxxxx");
  // console.log(geotypes);
  // console.log("xxx___xxxxxx");
  // console.log(hostnames);
  // console.log("xxxxxxxxxxxxx");

  const [data, setData] = useState<Inputs>();

  const {
    register,
    handleSubmit,
    watch,
    reset,
    formState: { errors },
  } = useForm<Inputs>({
    resolver: zodResolver(FormDataSchema),
  });

  const processForm: SubmitHandler<Inputs> = async (data) => {
    console.log("____top of processForm______(written to BROWSER)__");
    console.log(data);
    console.log("__________________________________________________");
    const result = await addEntry(data);
    console.log(result);

    if (!result) {
      console.log("Something went wrong");
      return;
    }

    if (result.error) {
      // set local error state
      console.log(result.error);
      return;
    }

    reset();
    setData(result.data);
  };

  return (
    <section className="flex gap-6">
      <form
        onSubmit={handleSubmit(processForm)}
        className="flex flex-1 flex-col gap-4 sm:w-1/2"
      >
        <Input
          placeholder="name"
          className="rounded-lg"
          {...register("name")}
        />
        {errors.name?.message && (
          <p className="text-sm text-red-400">{errors.name.message}</p>
        )}

        <Input
          placeholder="message"
          className="rounded-lg"
          {...register("message")}
        />
        {errors.message?.message && (
          <p className="text-sm text-red-400">{errors.message.message}</p>
        )}

        <Select name="hostname">
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder={hostnames[0]} />
          </SelectTrigger>
          <SelectContent>
            {hostnames.map((hostname: string) => {
              return (
                <SelectItem key={hostname} value={hostname}>
                  {hostname}
                </SelectItem>
              );
            })}
          </SelectContent>
        </Select>

        <Button className="rounded-lg bg-black py-2 text-white" type="submit">
          Submit
        </Button>
      </form>

      <div className="flex-1 rounded-lg bg-cyan-600 p-8 text-white">
        <pre>{JSON.stringify(data, null, 2)}</pre>
      </div>
    </section>
  );
}
