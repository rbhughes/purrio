2024-02-14 | how table-vis-switch worked (portals)


...in app/components/sidebar.tsx

        <div id="table-or-viz"></div>

...in app/(protected)/repos/repos.tsx:

import TableVisSwitch from "@/components/table-vis-switch";
import RepoVis from "./repo-vis";
import { createPortal } from "react-dom";

^^^

  const [tableVizElement, setTableVizElement] = React.useState<HTMLElement>();
  const [showTable, setShowTable] = React.useState<boolean>(true);

  // because "document" may not exist in nextjs client for some reason...
  React.useEffect(() => {
    const tve: HTMLElement = document.getElementById("table-or-viz")!;
    if (tve) {
      setTableVizElement(tve);
    }
  });

^^^
  return (
    <div>
      {/* {tableVizElement &&
        createPortal(
          <TableVisSwitch onToggle={handleToggle} />,
          tableVizElement
        )} */}

^^^
      {showTable ? (
        <RepoTable repos={repos} setValue={form.setValue} />
      ) : (
        <RepoVis repos={repos} />
      )} */}



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function getValueByKey(jsonArray: string, searchKey: string): number | null {
  const parsedArray: JsonObject[] = JSON.parse(jsonArray);

  const resultObject = parsedArray.find((item) => searchKey in item);

  if (resultObject) {
    return resultObject[searchKey];
  }

  return null; // or any default value if the key is not found
}

const expandInventoryToColumns = (inventory: JsonObject[]) => {
  inventory.forEach((i) => {
    for (const [key, val] of Object.entries(i)) {
      console.log(key, "--------", val);
    }
  });
};


npx shadcn-ui@latest add textarea


npx supabase gen types typescript --project-id mjmxxfikiuvjfjljbhcy --schema public > lib/sb_types.ts


// 2024-01-18 | just use constant in purr_utils, no need for this complexity
// export async function fetchGeoTypes(
//   supabase: SupabaseClient
// ): Promise<string[]> {
//   const { data, error } = await supabase.rpc("get_geo_type_values");
//   if (error) {
//     console.error(error);
//     return [];
//   } else {
//     return data;
//   }
// }

// export async function fetchBatches(supabase: SupabaseClient): Promise<Batch[]> {
//   const { data, error } = await supabase
//     .from("batch")
//     .select()
//     .order("row_created", { ascending: false });
//   if (error) {
//     console.error(error);
//     return [];
//   } else {
//     return data as Batch[];
//   }
// }