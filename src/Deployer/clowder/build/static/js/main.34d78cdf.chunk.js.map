{"version":3,"sources":["purr-cfg.js","utility.js","components/Config.js","components/AssetContext.js","components/VendorContext.js","components/ModalJobForm.js","graphql/queries.js","graphql/subscriptions.js","components/WorkerContext.js","components/JobBox.js","components/JobList.js","graphql/mutations.js","App.js","serviceWorker.js","index.js"],"names":["config","purr_org","purr_env","aws_project_region","aws_cognito_region","aws_appsync_region","aws_appsync_authenticationType","aws_cognito_identity_pool_id","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","PURR_ACCESS_KEY_ID","PURR_SECRET_ACCESS_KEY","purr_queue_url","Crypto","require","Path","pcfg","default","module","exports","hashify","s","hash","createHash","update","toLowerCase","digest","stripToAlphaNum","replace","assetLambdaName","app","asset","a","split","map","w","c","toUpperCase","join","GEOGRAPHIX","PETRA","KINGDOM","PETREL","enqueueLambdaName","batcherLambdaName","ggxDBConn","params","aux","repo","repon","home","basename","dirname","proj","uid","pwd","dbf","dbn","host","server","astart","port","Config","props","console","log","process","JSON","stringify","AssetContext","React","createContext","AssetProvider","useState","assetList","setAssetList","fetchAssets","API","graphql","graphqlOperation","res","data","__type","enumValues","o","key","name","text","value","error","useEffect","Provider","children","VendorContext","vendors","geographix","label","valueSetter","m","match","shortName","longName","icon","formInstructions","kingdom","petra","VendorProvider","ModalJobForm","defaultValues","job","assets","visible","setVisible","formDefaults","setFormDefaults","useContext","vendor","useForm","control","register","handleSubmit","reset","setValue","watchRepo","watch","useFieldArray","fields","append","remove","onSubmit","id","handleJobUpdate","handleJobCreate","Modal","open","size","trigger","Button","onClick","Header","Icon","Content","Description","Form","Group","ref","hidden","readOnly","Field","width","Divider","field","index","Container","fluid","widths","defaultValue","x","Popup","wide","placeholder","filter","chunk","type","disabled","length","floated","listNotesByPKey","onCreateNote","WorkerContext","initialState","reducer","state","action","itemCount","batchCount","Error","WorkerProvider","useReducer","dispatch","WorkerStore","WorkerStatus","Card","event","handleWorkerPing","handleNotesDelete","setNotes","WorkerStatusSpinner","Message","className","List","Item","MessageList","notes","sort","b","rk","note","MessageListItem","n","parse","cargo","lead","class","main","item","as","color","JobBox","queries","dbNotes","fetchNotes","subscription","subscriptions","subscribe","next","createdNote","unsubscribe","Segment","Grid","Row","Column","divided","horizontal","Label","tag","content","e","handleJobDelete","handleEnqueue","Transition","unmountOnHide","animation","duration","style","maxHeight","overflow","utility","getCredentials","Auth","currentCredentials","currCred","cred","essentialCredentials","region","lambdaInvoke","args","lamb","Lambda","FunctionName","Payload","invoke","promise","payload","lambda","loadingSpin","spin","preventDefault","persist","target","formJobToDB","deserializeJobs","jobs","push","attachJobHandlers","updateJob","pair","allNotes","pairs","doomed","i","discards","slice","Promise","all","enqueueLambda","a_purr_org","a_purr_env","r_app","m_job_id","batcherLambda","conn","assetLambda","q_filter","q_chunk","assetQ","r_target","r_directive","f_asset","f_batcher","f_enqueue","m_label","m_asset","m_purr_org","m_purr_env","q_counter","counter","q_selector","selector","q_conn","emptyJob","handlers","Object","assign","JobList","setJobs","isLoading","setIsLoading","dbJobs","listJobsByApp","fetchJobs","createdJob","onCreateJob","refresh","concat","updatedJob","onUpdateJob","j","includes","deletedJob","onDeleteJob","batch_count","item_count","Loader","active","Amplify","configure","Home","NotFound","window","location","pathname","handleSignOut","signOut","HeaderBar","Menu","exact","NavLink","to","position","path","component","render","withAuthenticator","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34d78cdf.chunk.js","sourcesContent":["const config = {\n  purr_org: 'purrio',\n  purr_env: 'dev',\n  aws_project_region: 'us-east-2',\n  aws_cognito_region: 'us-east-2',\n  aws_appsync_region: 'us-east-2',\n  aws_appsync_authenticationType: 'AWS_IAM',\n  aws_cognito_identity_pool_id: 'us-east-2:6a00851f-999f-4880-bf61-363737b3f6ea',\n  aws_user_pools_id: 'us-east-2_vwCiSr8wb',\n  aws_user_pools_web_client_id: '2v75tgk3omtgif555hqf1u8bu8',\n  aws_appsync_graphqlEndpoint: 'https://6zdgoamierc2rjsjjjkcwetc3i.appsync-api.us-east-2.amazonaws.com/graphql',\n  PURR_ACCESS_KEY_ID: 'AKIAWKRWVEI3LNE34SEP',\n  PURR_SECRET_ACCESS_KEY: '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',\n  purr_queue_url: 'https://sqs.us-east-2.amazonaws.com/434980069942/purrio-dev-Queue',\n}\nexport default config","//import pcfg from './purr-cfg'\nconst Crypto = require('crypto')\nconst Path = require('path')\n// require pcfg instead of import due to:\n// https://github.com/webpack/webpack/issues/3997\n// (just means we need to add the \"default\")\nconst pcfg = require('./purr-cfg').default\n\n// NOTE: ignores case on Windows\nconst hashify = s => {\n  const hash = Crypto.createHash('md5')\n  hash.update(s.toLowerCase())\n  return hash.digest('hex')\n}\n\n// remove anything but numbers and letters and downcase (used for sortkey)\nconst stripToAlphaNum = s => {\n  return s.replace(/[^a-z0-9+]+/gi, '').toLowerCase()\n}\n\n// TODO: revisit this if non-Windows is required\n// these args get used with SAP's SQLAnywhere\n// React doesn't support Path.win32, no windows-ish normalize and sep\n// switch to forward slash to avoid escaping hell, switch back in dbf below\n// for GGX, aux = ggx server host\nconst defineSQLAParams = params => {\n  const { aux, repo } = params\n  const repon = repo.replace(/\\\\/g, '/')\n  const home = Path.basename(Path.dirname(repon))\n  const proj = Path.basename(repon)\n\n  return {\n    params: {\n      uid: 'dba',\n      pwd: 'sql',\n      dbf: Path.join(repo, 'gxdb.db').replace(/\\//g, '\\\\'),\n      dbn: `${proj.replace(/ /g, '_')}-${home.replace(/ /g, '_')}`,\n      host: aux,\n      server: `GGX_${aux.toUpperCase()}`,\n      astart: 'YES'\n    },\n    home: home,\n    port: 2638,\n    proj: proj\n  }\n}\n\n// Why? Enums in GraphQL are capitalized by convention,\n// Underscores are verboten in Lambda names,\n// GeoGraphix (and other vendors?) have funny capitalization.\n// The naming convention is:\n//   organization-environment-AbbreviatedApp + \"Asset\" + asset\n// i.e. purrio-dev-GGXWellHeader\nconst assetLambdaName = (app, asset) => {\n  const abbv = {\n    GEOGRAPHIX: 'GGX',\n    PETRA: 'PET',\n    KINGDOM: 'TKS',\n    PETREL: 'PTL'\n  }\n\n  const a = asset\n    .split('_')\n    .map(w => {\n      return w.toLowerCase().replace(/\\w/, c => c.toUpperCase())\n    })\n    .join('')\n\n  return `${pcfg.purr_org}-${pcfg.purr_env}-${abbv[app]}${a}`\n}\n\nconst enqueueLambdaName = () => {\n  return `${pcfg.purr_org}-${pcfg.purr_env}-Enqueue`\n}\n\nconst batcherLambdaName = () => {\n  return `${pcfg.purr_org}-${pcfg.purr_env}-Batcher`\n}\n\nmodule.exports = {\n  hashify: hashify,\n  stripToAlphaNum: stripToAlphaNum,\n  assetLambdaName: assetLambdaName,\n  enqueueLambdaName: enqueueLambdaName,\n  batcherLambdaName: batcherLambdaName,\n  ggxDBConn: defineSQLAParams\n}\n","import React from 'react'\nimport pcfg from '../purr-cfg'\n\nconst Config = props => {\n  console.log(process.env)\n  return (\n    <h3>\n      <pre>\n        const config = {JSON.stringify(pcfg, null, 2)}\n        <br></br>\n        export default config\n      </pre>\n    </h3>\n  )\n}\nexport default Config\n\n// pipeline resolver kinda like step function but it can\n// permit a multi-stage VTL resolver\n\n//two types of context: user + extra resolver fields\n\n// maybe ElasticCache\n\n// adrian hall\n","import React, { useState, useEffect } from 'react'\nimport { API, graphqlOperation } from 'aws-amplify'\n\nconst assetChoice = `query metaStuff {\n  __type(name: \"Asset\"){\n    enumValues {\n      name\n    }\n  }\n}`\n\nconst AssetContext = React.createContext()\n\n// Define what fields we use for filter in the GUI form\n// This would ideally be part of the asset enum in schema.graphql.\n/*\n// TODO: Update this if the Enum changes\nconst assetWhereClauseFields = {\n  BUSINESS_ASSOCIATE: ['tbd'],\n  DIGITAL_LOG: ['tbd'],\n  DIRECTIONAL_SURVEY: ['UWI'],\n  FORMATION_TOP: ['tbd'],\n  LEGAL_DESCRIPTION: ['tbd'],\n  PRODUCTION: ['tbd'],\n  RASTER_LOG: ['tbd'],\n  STRAT_COLUMN: ['tbd'],\n  WELL_HEADER: ['tbd']\n}\n*/\n\nconst AssetProvider = props => {\n  const [assetList, setAssetList] = useState([])\n\n  const fetchAssets = async () => {\n    try {\n      let res = await API.graphql(graphqlOperation(assetChoice))\n      let assetList = res.data.__type.enumValues.map(o => ({\n        key: o.name,\n        text: o.name,\n        value: o.name\n      }))\n      setAssetList(assetList)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchAssets()\n  }, [])\n\n  return (\n    <AssetContext.Provider value={assetList}>\n      {props.children}\n    </AssetContext.Provider>\n  )\n}\n\nexport { AssetProvider, AssetContext }\n","import React from 'react'\n\nconst VendorContext = React.createContext()\n\nconst vendors = app => {\n  const v = {\n    geographix: {\n      aux: {\n        label: 'server hostname',\n        valueSetter: s => {\n          // matches \"server\" in a UNC path--usually the GGX server\n          let m = s.match(/\\\\\\\\(.+?)\\\\/)\n          return m ? m[1] : 'localhost'\n        }\n      },\n      shortName: 'GeoGraphix',\n      longName: 'GeoGraphix Discovery',\n      icon: 'home',\n      formInstructions:\n        'Enter path to a GeoGraphix project. This will usually be a UNC path.'\n    },\n    kingdom: {\n      aux: {\n        label: 'kingdom thing',\n        valueSetter: s => s\n      },\n      shortName: 'Kingdom',\n      longName: 'IHS Kingdom',\n      icon: 'home',\n      formInstructions:\n        'Enter path to a Kingdom Project folder. For SQL Server projects, enter the credentials.'\n    },\n    petra: {\n      aux: {\n        label: 'petra thing',\n        valueSetter: s => s\n      },\n      shortName: 'Petra',\n      longName: 'IHS Petra',\n      icon: 'home',\n      formInstructions: 'Enter a path for a Petra project. Yada yada yada.'\n    }\n  }\n  return v[app.toLowerCase()]\n}\n\nconst VendorProvider = props => {\n  return (\n    <VendorContext.Provider value={vendors}>\n      {props.children}\n    </VendorContext.Provider>\n  )\n}\n\nexport { VendorProvider, VendorContext }\n","import React, { useState, useContext, useEffect } from 'react'\nimport { useForm, useFieldArray } from 'react-hook-form'\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Icon,\n  Modal,\n  Popup\n} from 'semantic-ui-react'\nimport { AssetContext } from './AssetContext'\nimport { VendorContext } from './VendorContext'\n\n// TODO: form validation--particularly or chunk <1?\nconst ModalJobForm = (props) => {\n  //console.log('_________modalJobForm')\n  //console.log(props)\n  const defaultValues = {\n    app: props.job.app,\n    aux: props.job.aux,\n    repo: props.job.repo,\n    label: props.job.label,\n    assets: props.job.assets\n  }\n  const [visible, setVisible] = useState(false)\n  const [formDefaults, setFormDefaults] = useState(defaultValues)\n\n  const assetList = useContext(AssetContext)\n  const vendor = useContext(VendorContext)(props.job.app)\n\n  const { control, register, handleSubmit, reset, setValue, watch } = useForm({\n    defaultValues: formDefaults\n  })\n\n  const watchRepo = watch('repo', props.repo)\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'assets'\n  })\n\n  useEffect(() => {\n    reset(formDefaults)\n  }, [formDefaults, reset])\n\n  const onSubmit = async (data) => {\n    setFormDefaults(data)\n    if (props.job.id) {\n      await props.job.handleJobUpdate(data)\n    } else {\n      await props.job.handleJobCreate(data)\n    }\n    setVisible(!visible)\n  }\n\n  // https://react-hook-form.com/api#useFieldArray\n  return (\n    <Modal\n      open={visible}\n      size=\"large\"\n      trigger={\n        <Button\n          onClick={() => {\n            setVisible(!visible)\n          }}\n        >\n          {props.job.id ? 'Edit' : 'Create Job'}\n        </Button>\n      }\n    >\n      <Modal.Header>\n        <Icon name={vendor.icon} />\n        {vendor.longName}\n      </Modal.Header>\n      <Modal.Content>\n        <Modal.Description>{vendor.formInstructions}</Modal.Description>\n      </Modal.Content>\n\n      <Modal.Content>\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Form.Group>\n            <input\n              name={'app'}\n              ref={register({})}\n              value={props.job.app}\n              hidden\n              readOnly\n            />\n            <Form.Field width={8}>\n              <label>repo</label>\n              <input name={'repo'} ref={register({})} />\n            </Form.Field>\n            <Form.Field width={4}>\n              <label>{vendor.aux.label}</label>\n              <input name={'aux'} ref={register({})} />\n              {setValue('aux', vendor.aux.valueSetter(watchRepo))}\n            </Form.Field>\n            <Form.Field width={4}>\n              <label>label</label>\n              <input name={'label'} ref={register({})} />\n            </Form.Field>\n          </Form.Group>\n\n          {/*\n          <Divider hidden />\n          <Divider hidden />\n          <Divider>Asset Collection</Divider>\n          <Divider hidden />\n          */}\n          <Divider hidden />\n\n          {fields.map((field, index) => {\n            return (\n              <Container key={field.id} fluid>\n                <Form.Group widths=\"equal\">\n                  <Form.Field width={3}>\n                    {index === 0 && <label>asset</label>}\n                    <select\n                      name={`assets[${index}].asset`}\n                      ref={register({})}\n                      defaultValue={field.asset}\n                    >\n                      {assetList.map((x) => {\n                        return <option key={x.key}>{x.value}</option>\n                      })}\n                    </select>\n                  </Form.Field>\n\n                  <Form.Field width={4}>\n                    {index === 0 && (\n                      <>\n                        <Popup trigger={<label>filter</label>} wide=\"very\">\n                          Insert some instructions for how to enter filter text\n                        </Popup>\n                      </>\n                    )}\n\n                    <input\n                      placeholder={'use commas to separate multiple items'}\n                      name={`assets[${index}].filter`}\n                      ref={register({})}\n                      defaultValue={field.filter}\n                    />\n                  </Form.Field>\n\n                  <Form.Field width={1}>\n                    {index === 0 && (\n                      <>\n                        <Popup trigger={<label>chunk</label>} wide=\"very\">\n                          something about chunk size\n                        </Popup>\n                      </>\n                    )}\n                    <input\n                      placeholder={'chunk size'}\n                      name={`assets[${index}].chunk`}\n                      ref={register({})}\n                      defaultValue={field.chunk}\n                    />\n                  </Form.Field>\n\n                  <Form.Field width={3}>\n                    {index === 0 && <label>&nbsp;</label>}\n                    <Button\n                      type=\"button\"\n                      disabled={fields.length < 2}\n                      onClick={() => {\n                        remove(index)\n                      }}\n                    >\n                      Remove\n                    </Button>\n                    {index === 0 && (\n                      <Button\n                        type=\"button\"\n                        floated=\"right\"\n                        onClick={() => append(index)}\n                      >\n                        Add Another Asset\n                      </Button>\n                    )}\n                  </Form.Field>\n                </Form.Group>\n              </Container>\n            )\n          })}\n          <Divider hidden />\n\n          <Button type=\"submit\">Save</Button>\n          <Button\n            onClick={() => {\n              //reset()\n              setVisible(!visible)\n            }}\n          >\n            Cancel\n          </Button>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n\nexport default ModalJobForm\n","export const listJobsByApp = `query ListJobsByApp($app: App) {\n  listJobsByApp(app: $app){\n    id\n    rk\n    app\n    assets\n    aux\n    label\n    repo\n    modified\n  }\n}`\n\nexport const listNotesByPKey = `query ListNotesByPKey($id: ID) {\n  listNotesByPKey(id: $id) {\n    id\n    rk\n    cargo\n    modified\n  }\n}`\n","export const onCreateJob = `subscription OnCreateJob {\n  onCreateJob{\n    id\n    rk\n    app\n    assets\n    aux\n    label\n    repo\n    modified\n  }\n}`\n\nexport const onUpdateJob = `subscription OnUpdateJob {\n  onUpdateJob{\n    id\n    rk\n    app\n    assets\n    aux\n    label\n    repo\n    modified\n  }\n}`\n\nexport const onDeleteJob = `subscription OnDeleteJob {\n  onDeleteJob{\n    id\n    rk\n  }\n}`\n\nexport const onCreateNote = `subscription OnCreateNote {\n  onCreateNote {\n    id\n    rk\n    cargo\n    modified\n  }\n}`\n","import React, { createContext, useContext, useReducer } from 'react'\n\nconst WorkerContext = createContext()\nconst initialState = {}\n\nconst reducer = (state, action) => {\n  if (!state[action.id]) {\n    //state[action.id] = { notes: [], itemCount: 0, batchCount: 0 }\n    state[action.id] = { itemCount: 0, batchCount: 0 }\n  }\n  switch (action.type) {\n    //case 'message':\n    //  state[action.id] = {\n    //    notes: state[action.id].notes.concat([action.note])\n    //  }\n    //  return { ...state }\n\n    case 'increment':\n      state[action.id] = {\n        itemCount: state[action.id].itemCount + action.itemCount,\n        batchCount: state[action.id].batchCount + action.batchCount\n      }\n      return { ...state }\n\n    case 'decrement':\n      state[action.id] = {\n        itemCount: state[action.id].itemCount - action.itemCount,\n        batchCount: state[action.id].batchCount - action.batchCount\n      }\n      return { ...state }\n    case 'reset':\n      state[action.id] = {\n        itemCount: 0,\n        batchCount: 0\n      }\n      return { ...state }\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`)\n  }\n}\n\nexport const WorkerProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return (\n    <WorkerContext.Provider value={{ state, dispatch }}>\n      {children}\n    </WorkerContext.Provider>\n  )\n}\n\nexport const WorkerStore = () => useContext(WorkerContext)\n\n\n/*\nexport const loadingSpin = (event, spin) => {\n  event.preventDefault()\n  event.persist()\n  if (spin) {\n    event.target.className += ' loading'\n  } else {\n    event.target.className = event.target.className.replace(/ loading/g, '')\n  }\n}\n*/","import React, { useState, useEffect } from 'react'\nimport {\n  Button,\n  Card,\n  Grid,\n  Divider,\n  Header,\n  Icon,\n  Label,\n  List,\n  Message,\n  Segment,\n  Transition\n} from 'semantic-ui-react'\n\nimport { API, graphqlOperation } from 'aws-amplify'\nimport ModalJobForm from './ModalJobForm'\nimport * as queries from '../graphql/queries'\nimport * as subscriptions from '../graphql/subscriptions'\nimport { WorkerStore } from './WorkerContext'\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst WorkerStatus = (props) => {\n  return (\n    <Card fluid>\n      <Button\n        onClick={async (event) => {\n          await props.job.handleWorkerPing(event, props.job)\n        }}\n      >\n        ping a worker\n      </Button>\n\n      <Button\n        onClick={async (event) => {\n          let deleted = await props.job.handleNotesDelete(event, props.job)\n          if (deleted) {\n            props.setNotes([])\n            props.dispatch({\n              id: props.job.id,\n              type: 'reset'\n            })\n          }\n        }}\n      >\n        clear messages\n      </Button>\n    </Card>\n  )\n}\n\nconst WorkerStatusSpinner = (props) => {\n  let batchCount = 0\n  let itemCount = 0\n  if (props.state) {\n    batchCount = props.state.batchCount ? props.state.batchCount : 0\n    itemCount = props.state.itemCount ? props.state.itemCount : 0\n  }\n\n  return (\n    <Message icon>\n      <Icon\n        className={batchCount + itemCount > 0 ? 'loading' : ''}\n        name=\"circle notched\"\n      />\n      <Message.Content>\n        <Message.Header>Worker Progress</Message.Header>\n        <List>\n          <List.Item>Remaining Batches: {batchCount}</List.Item>\n          <List.Item>Remaining Items: {itemCount}</List.Item>\n        </List>\n      </Message.Content>\n    </Message>\n  )\n}\n\nconst MessageList = (props) => {\n  return (\n    <Card fluid>\n      <List>\n        {props.notes\n          .sort((a, b) => (a.rk < b.rk ? 1 : -1))\n          .map((note) => (\n            <MessageListItem key={note.rk} note={note} />\n          ))}\n      </List>\n    </Card>\n  )\n}\n\nconst MessageListItem = (props) => {\n  const n = JSON.parse(props.note.cargo)\n  //const className = n.class\n  const lead = n.text\n\n  delete n.class\n  delete n.text\n\n  const main = JSON.stringify(n)\n\n  const item = n.error ? (\n    <Header as=\"h5\" color=\"red\">\n      {lead}\n      <Divider />\n      {JSON.stringify(n.error, null, 2)}\n    </Header>\n  ) : (\n    <Header as=\"h5\">\n      <code>\n        {lead} | {main}\n      </code>\n    </Header>\n  )\n  return (\n    <List.Item>\n      <List.Content>\n        <List.Description>{item}</List.Description>\n      </List.Content>\n    </List.Item>\n  )\n}\n\n/*\nconst handleFakeMessage = async (job) => {\n  try {\n    const fake = {\n      id: job.id,\n      rk: Date.now().toString(),\n      message: JSON.stringify({\n        class: 'info',\n        msg: `FAKE message says Hello ${Date.now()}`\n      })\n    }\n    await API.graphql(graphqlOperation(mutations.createNote, { note: fake }))\n  } catch (error) {\n    console.error(error)\n  }\n}\n*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst JobBox = (props) => {\n  const [notes, setNotes] = useState([])\n  const [visible, setVisible] = useState(false)\n  const { state, dispatch } = WorkerStore()\n\n  useEffect(() => {\n    const fetchNotes = async () => {\n      const dbNotes = await API.graphql(\n        graphqlOperation(queries.listNotesByPKey, { id: props.job.id })\n      )\n      setNotes(dbNotes.data.listNotesByPKey)\n    }\n    fetchNotes()\n  }, [props.job.id])\n\n  useEffect(() => {\n    const subscription = API.graphql(\n      graphqlOperation(subscriptions.onCreateNote)\n    ).subscribe({\n      next: (res) => {\n        const createdNote = res.value.data.onCreateNote\n\n        if (createdNote.id === props.job.id) {\n          setNotes((notes) => [...notes, createdNote])\n        }\n      }\n    })\n    return () => subscription.unsubscribe()\n  }, [props.job.id])\n\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={11}>\n            <List divided horizontal size=\"huge\">\n              <List.Item>\n                <code>{props.job.repo}</code>\n              </List.Item>\n              <List.Item>\n                <Label tag>{props.job.label}</Label>\n              </List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column width={5}>\n            <Button.Group floated=\"right\">\n              <Button\n                content={visible ? 'Hide' : 'Reveal'}\n                onClick={() => {\n                  setVisible(!visible)\n                }}\n              />\n\n              <ModalJobForm job={props.job} />\n              <Button\n                onClick={(e) => {\n                  props.job.handleJobDelete(e, props.job)\n                }}\n              >\n                Delete\n              </Button>\n              <Button>Schedule</Button>\n\n              <Button\n                onClick={(e) => {\n                  props.job.handleEnqueue(e, props.job)\n                }}\n              >\n                Enqueue\n              </Button>\n            </Button.Group>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Transition\n          visible={visible}\n          unmountOnHide={true}\n          animation=\"fade\"\n          duration={200}\n        >\n          <Grid.Row>\n            <Grid.Column width={3}>\n              <WorkerStatusSpinner state={state[props.job.id]} />\n              <WorkerStatus\n                job={props.job}\n                setNotes={setNotes}\n                dispatch={dispatch}\n              />\n            </Grid.Column>\n            <Grid.Column\n              width={13}\n              style={{ maxHeight: 200, overflow: 'auto' }}\n            >\n              <MessageList notes={notes} />\n            </Grid.Column>\n          </Grid.Row>\n        </Transition>\n      </Grid>\n    </Segment>\n  )\n}\n\nexport default JobBox\n","import React, { useState, useEffect } from 'react'\nimport { Loader, Divider } from 'semantic-ui-react'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport JobBox from './JobBox'\nimport ModalJobForm from './ModalJobForm'\nimport * as mutations from '../graphql/mutations'\nimport * as queries from '../graphql/queries'\nimport * as subscriptions from '../graphql/subscriptions'\nimport { Auth } from 'aws-amplify'\nimport Lambda from 'aws-sdk/clients/lambda'\nimport pcfg from '../purr-cfg'\nimport { WorkerStore } from './WorkerContext'\nconst utility = require('../utility')\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst getCredentials = async (event) => {\n  const currCred = await Auth.currentCredentials()\n  const cred = Auth.essentialCredentials(currCred)\n  //TODO store region someplace else\n  cred.region = 'us-east-2'\n  return cred\n}\n\nconst lambdaInvoke = async (event) => {\n  const { cred, name, args } = event\n  const lamb = new Lambda(cred)\n  let params = {\n    FunctionName: name,\n    Payload: JSON.stringify(args)\n  }\n  try {\n    let res = await lamb.invoke(params).promise()\n    let payload = JSON.parse(res.Payload)\n    payload.lambda = name\n    return payload\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst loadingSpin = (event, spin) => {\n  event.preventDefault()\n  event.persist()\n  if (spin) {\n    event.target.className += ' loading'\n  } else {\n    event.target.className = event.target.className.replace(/ loading/g, '')\n  }\n}\n\nconst formJobToDB = (data) => {\n  const job = {\n    id: utility.hashify(`${data.app}_${data.repo}_${data.label}`),\n    rk: utility.stripToAlphaNum(data.repo),\n    app: data.app,\n    assets: JSON.stringify(data.assets) || null,\n    aux: data.aux || null,\n    label: data.label || 'unlabeled',\n    repo: data.repo\n  }\n  return job\n}\n\nconst deserializeJobs = (data) => {\n  const jobs = []\n  for (const o of data) {\n    const job = {\n      id: o.id,\n      app: o.app,\n      assets: JSON.parse(o.assets),\n      aux: o.aux,\n      label: o.label,\n      repo: o.repo\n    }\n    jobs.push(attachJobHandlers(job))\n  }\n  return jobs\n}\n\nconst handleJobCreate = async (data) => {\n  try {\n    const job = formJobToDB(data)\n    const x = await API.graphql(\n      graphqlOperation(mutations.createJob, { job: job })\n    )\n    return attachJobHandlers(x.data.updateJob)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst handleJobUpdate = async (data) => {\n  try {\n    const job = formJobToDB(data)\n    const x = await API.graphql(\n      graphqlOperation(mutations.updateJob, { job: job })\n    )\n    return attachJobHandlers(x.data.updateJob)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst handleJobDelete = async (event, job) => {\n  try {\n    loadingSpin(event, true)\n    const pair = { id: job.id, rk: utility.stripToAlphaNum(job.repo) }\n    await API.graphql(graphqlOperation(mutations.deleteJob, { pair: pair }))\n    await handleNotesDelete(event, job)\n    loadingSpin(event, false)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst handleNotesDelete = async (event, job) => {\n  try {\n    loadingSpin(event, true)\n    let allNotes = await API.graphql(\n      graphqlOperation(queries.listNotesByPKey, { id: job.id })\n    )\n    if (allNotes.data.listNotesByPKey.length > 0) {\n      const pairs = allNotes.data.listNotesByPKey.map((o) => {\n        return { id: o.id, rk: o.rk }\n      })\n\n      // DynamoDB batch delete is limited to chunks of 25, may need a refactor?\n      const doomed = []\n      for (let i = 0; i < pairs.length; i += 25) {\n        let discards = pairs.slice(i, i + 25)\n        doomed.push(\n          API.graphql(\n            graphqlOperation(mutations.batchDeleteNotes, { pairs: discards })\n          )\n        )\n      }\n      await Promise.all(doomed)\n      loadingSpin(event, false)\n      return true\n    }\n    loadingSpin(event, false)\n    return true\n  } catch (error) {\n    console.error(error)\n    return false\n  }\n}\n\nconst handleWorkerPing = async (event, job) => {\n  try {\n    loadingSpin(event, true)\n\n    const enqueueLambda = utility.enqueueLambdaName()\n    const cred = await getCredentials()\n\n    await lambdaInvoke({\n      cred: cred,\n      name: enqueueLambda,\n      args: {\n        a_purr_org: pcfg.purr_org,\n        a_purr_env: pcfg.purr_env,\n        r_app: 'ping',\n        m_job_id: job.id\n      }\n    })\n\n    loadingSpin(event, false)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst handleEnqueue = async (event, job) => {\n  try {\n    loadingSpin(event, true)\n\n    const batcherLambda = utility.batcherLambdaName()\n    const enqueueLambda = utility.enqueueLambdaName()\n    const cred = await getCredentials()\n\n    //TODO: choose conn by app\n    //TODO: figure out how to route filesystem-based stuff\n\n    const conn = utility.ggxDBConn({ aux: job.aux, repo: job.repo })\n\n    for (const o of job.assets) {\n      const assetLambda = utility.assetLambdaName(job.app, o.asset)\n\n      let assetQ = await lambdaInvoke({\n        cred: cred,\n        name: assetLambda,\n        args: { q_filter: o.filter, q_chunk: o.chunk }\n      })\n\n      // a: attributes of this SQS message (usage tbd)\n      // r: routing info for worker\n      // f: lambda function names so that the worker needn't look them up\n      // m: metadata about the job\n      // q: stuff involving queries worker will use\n\n      const x = await lambdaInvoke({\n        cred: cred,\n        name: enqueueLambda,\n        args: {\n          a_purr_org: pcfg.purr_org,\n          a_purr_env: pcfg.purr_env,\n\n          r_app: job.app,\n          r_target: 'database',\n          r_directive: 'batcher',\n\n          f_asset: assetLambda,\n          f_batcher: batcherLambda,\n          f_enqueue: enqueueLambda,\n\n          m_label: job.label,\n          m_job_id: job.id,\n          m_asset: o.asset,\n          m_purr_org: pcfg.purr_org,\n          m_purr_env: pcfg.purr_env,\n\n          q_chunk: assetQ.chunk,\n          q_counter: assetQ.counter,\n          q_filter: job.filter,\n          q_selector: assetQ.selector,\n          q_conn: conn\n        }\n      })\n      //console.log(x)\n    }\n\n    loadingSpin(event, false)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst emptyJob = (app) => {\n  const job = {\n    app: app.toUpperCase(),\n    repo: '',\n    label: '',\n    assets: [{ asset: '', filter: '' }]\n  }\n  return attachJobHandlers(job)\n}\n\nconst attachJobHandlers = (job) => {\n  const handlers = {\n    handleJobCreate: handleJobCreate,\n    handleJobUpdate: handleJobUpdate,\n    handleJobDelete: handleJobDelete,\n    handleNotesDelete: handleNotesDelete,\n    handleEnqueue: handleEnqueue,\n    handleWorkerPing: handleWorkerPing\n  }\n  return Object.assign(job, handlers)\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst JobList = (props) => {\n  const [jobs, setJobs] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  const { dispatch } = WorkerStore()\n\n  useEffect(() => {\n    const fetchJobs = async (app) => {\n      setIsLoading(true)\n\n      try {\n        const dbJobs = await API.graphql(\n          graphqlOperation(queries.listJobsByApp, { app: app.toUpperCase() })\n        )\n        setJobs(deserializeJobs(dbJobs.data.listJobsByApp))\n      } catch (error) {\n        console.error(error)\n      }\n      setIsLoading(false)\n    }\n    fetchJobs(props.app)\n  }, [props.app])\n\n  useEffect(() => {\n    const subscription = API.graphql(\n      graphqlOperation(subscriptions.onCreateJob)\n    ).subscribe({\n      next: (res) => {\n        const createdJob = res.value.data.onCreateJob\n        const job = deserializeJobs([createdJob]) // input is an array\n        const refresh = jobs.concat(job)\n        setJobs(refresh)\n      }\n    })\n    return () => subscription.unsubscribe()\n  })\n\n  useEffect(() => {\n    const subscription = API.graphql(\n      graphqlOperation(subscriptions.onUpdateJob)\n    ).subscribe({\n      next: (res) => {\n        // job.id is based on \"app + repo + label\", so if any of those fields\n        // changed this should get processed as a Create, not an Update\n\n        const updatedJob = res.value.data.onUpdateJob\n        const job = deserializeJobs([updatedJob])[0]\n\n        /*\n        // functional update has no relevant difference\n        setJobs((jobs) => {\n          const idExists = jobs.map((j) => j.id).includes(job.id)\n          if (idExists) {\n            const refresh = jobs.map((j) => {\n              return j.id === job.id ? job : j\n            })\n            return refresh\n          } else {\n            return [...jobs, job]\n          }\n        })\n        */\n\n        let idExists = jobs.map((j) => j.id).includes(job.id)\n\n        if (idExists) {\n          const refresh = jobs.map((j) => {\n            return j.id === job.id ? job : j\n          })\n          setJobs(refresh)\n        } else {\n          setJobs((jobs) => [...jobs, job])\n        }\n      }\n    })\n    return () => subscription.unsubscribe()\n  }, [jobs])\n\n  useEffect(() => {\n    const subscription = API.graphql(\n      graphqlOperation(subscriptions.onDeleteJob)\n    ).subscribe({\n      next: (res) => {\n        const deletedJob = res.value.data.onDeleteJob\n        const refresh = jobs.filter(\n          (job) => job.id !== deletedJob.id && job.rk !== deletedJob.rk\n        )\n        setJobs(refresh)\n      }\n    })\n    return () => subscription.unsubscribe()\n  })\n\n  useEffect(() => {\n    const subscription = API.graphql(\n      graphqlOperation(subscriptions.onCreateNote)\n    ).subscribe({\n      next: (res) => {\n        const createdNote = res.value.data.onCreateNote\n        const cargo = JSON.parse(createdNote.cargo)\n        if (cargo.action && cargo.action === 'set_counts') {\n          dispatch({\n            id: createdNote.id,\n            type: 'increment',\n            batchCount: cargo.batch_count,\n            itemCount: cargo.item_count\n          })\n        } else if (cargo.action && cargo.action === 'decrement') {\n          dispatch({\n            id: createdNote.id,\n            type: 'decrement',\n            batchCount: 1,\n            itemCount: cargo.item_count\n          })\n        }\n      }\n    })\n    return () => subscription.unsubscribe()\n  }, [dispatch])\n\n  return isLoading ? (\n    <Loader active={true} size=\"massive\" />\n  ) : (\n    <div>\n      {jobs.map((job) => (\n        <JobBox key={job.id} job={job} />\n      ))}\n      <Divider />\n      <ModalJobForm job={emptyJob(props.app)} />\n    </div>\n  )\n}\n\nexport default JobList\n","export const createJob = `mutation CreateJob($job: JobInput) {\n  createJob(job: $job) {\n    id\n    rk\n    app\n    assets\n    aux\n    label\n    repo\n  }\n}`\n\nexport const updateJob = `mutation UpdateJob($job: JobInput) {\n  updateJob(job: $job) {\n    id\n    rk\n    app\n    assets\n    aux\n    label\n    repo\n  }\n}`\n\nexport const deleteJob = `mutation DeleteJob($pair: KeyPair) {\n  deleteJob(pair: $pair) {\n    id\n    rk\n  }\n}`\n\nexport const createNote = `mutation CreateNote($note: NoteInput ) {\n  createNote(note: $note) {\n    id\n    rk\n    cargo\n  }\n}`\n\nexport const batchDeleteNotes = `mutation BatchDeleteNotes($pairs: [KeyPair]) {\n  batchDeleteNotes(pairs: $pairs) {\n    id\n    rk\n    cargo\n    modified\n  }\n}`\n","import React from 'react'\n\nimport {\n  BrowserRouter as Router,\n  NavLink,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport Amplify, { Auth } from 'aws-amplify'\nimport { withAuthenticator } from 'aws-amplify-react'\nimport { Menu } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport Config from './components/Config'\nimport JobList from './components/JobList'\nimport pcfg from './purr-cfg'\n\nAmplify.configure(pcfg)\n\nconst Home = () => <h1>Home stuff goes here</h1>\nconst NotFound = () => (\n  <h1>\n    Not a valid route: <code>{window.location.pathname}</code>\n  </h1>\n)\n\nconst handleSignOut = async (e) => {\n  e.preventDefault()\n  try {\n    let data = await Auth.signOut()\n    console.log(data)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nconst HeaderBar = (props) => {\n  return (\n    <Router>\n      <Menu className=\"ui\">\n        <Menu.Item\n          className=\"item\"\n          exact={true}\n          as={NavLink}\n          to=\"/\"\n          content=\"Home\"\n        />\n        <Menu.Item\n          className=\"item\"\n          as={NavLink}\n          to=\"/geographix\"\n          content=\"GeoGraphix\"\n        />\n        <Menu.Item\n          className=\"item\"\n          as={NavLink}\n          to=\"/kingdom\"\n          content=\"Kingdom\"\n        />\n        <Menu.Item className=\"item\" as={NavLink} to=\"/petra\" content=\"Petra\" />\n        <Menu.Item\n          className=\"item\"\n          as={NavLink}\n          to=\"/config\"\n          content=\"Config\"\n        />\n        <Menu.Item\n          className=\"item\"\n          as={NavLink}\n          to=\"signout\"\n          content=\"Sign Out\"\n          onClick={handleSignOut}\n          position=\"right\"\n        />\n      </Menu>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route\n          path=\"/geographix\"\n          render={(props) => <JobList {...props} app=\"geographix\" />}\n        />\n        <Route\n          path=\"/kingdom\"\n          render={(props) => <JobList {...props} app=\"kingdom\" />}\n        />\n        <Route\n          path=\"/petra\"\n          render={(props) => <JobList {...props} app=\"petra\" />}\n        />\n        <Route path=\"/config\" component={Config} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  )\n}\n\nconst App = () => {\n  return <HeaderBar />\n}\n\nexport default withAuthenticator(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n//import './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { AssetProvider } from './components/AssetContext'\nimport { VendorProvider } from './components/VendorContext'\nimport { WorkerProvider } from './components/WorkerContext'\n\nReactDOM.render(\n  <WorkerProvider>\n    <VendorProvider>\n      <AssetProvider>\n        <App />\n      </AssetProvider>\n    </VendorProvider>\n  </WorkerProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}