AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      UsernameAttributes:
        - email
      LambdaConfig:
        PreAuthentication: !GetAtt CognitoTriggered.Arn
        PostConfirmation: !GetAtt CognitoTriggered.Arn
        PostAuthentication: !GetAtt CognitoTriggered.Arn
        CustomMessage: !GetAtt CognitoTriggered.Arn
        PreSignUp: !GetAtt CognitoTriggered.Arn
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: clowder
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      AllowClassicFlow: false
      IdentityPoolName: !Sub ${AWS::StackName}-IdentityPool
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - region: !Ref AWS::Region
              client: !Ref UserPool
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn
        authenticated: !GetAtt AuthRole.Arn
    DependsOn: IdentityPool
  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt SiteBucket.DomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${OriginAccessIdentity}
                - OriginAccessIdentity: !Ref CDNOriginAccessIdentity
  CDNOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  CDNBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CDNOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: !GetAtt SiteBucket.Arn
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-sitebucke-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
  KittyBox:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: rk
          AttributeType: S
        - AttributeName: app
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: rk
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-KittyBox
      GlobalSecondaryIndexes:
        - IndexName: appIndex
          KeySchema:
            - AttributeName: app
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-Queue
  QueuePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-QueuePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueUrl
              - sqs:PurgeQueue
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource: !GetAtt Queue.Arn
  API:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub
        - ${AWS::StackName}-API
        - ResourceName: API
      AuthenticationType: AWS_IAM
      LogConfig:
        FieldLogLevel: ERROR
        CloudWatchLogsRoleArn: !GetAtt APILogsRole.Arn
  APISchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt API.ApiId
      DefinitionS3Location: Graphql/schema.graphql
  APIToKittyBoxDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt APIToKittyBoxAccessRole.Arn
      ApiId: !GetAtt API.ApiId
      Name: KittyBox
      DynamoDBConfig:
        TableName: !Ref KittyBox
        AwsRegion: !Ref AWS::Region
  APIToKittyBoxAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-API-to-KittyBox
      Policies:
        - PolicyName: Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt KittyBox.Arn
                  - !Sub ${KittyBox.Arn}/index/*
  APILogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-API-logs
      Policies:
        - PolicyName: Log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*:log-stream:*
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-AuthRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      ManagedPolicyArns:
        - !Ref APIPolicy
        - !Ref BatcherPolicy
        - !Ref EnqueuePolicy
        - !Ref QueuePolicy
        - !Ref GGXAssetPolicy
  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-UnauthRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      ManagedPolicyArns: []
  APIPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-APIPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: appsync:*
            Resource: !Sub
              - ${apiarn}/*
              - apiarn: !GetAtt API.Arn
  APIQuerylistJobsByAppResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt APIToKittyBoxDataSource.Name
      RequestMappingTemplateS3Location: Graphql/Query-listJobsByApp-request.vm
      ResponseMappingTemplateS3Location: Graphql/Query-listJobsByApp-response.vm
      ApiId: !GetAtt API.ApiId
      FieldName: listJobsByApp
    DependsOn: APISchema
  APIQuerylistJobsByPartitionKeyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt APIToKittyBoxDataSource.Name
      RequestMappingTemplateS3Location: Graphql/Query-listJobsByPartitionKey-request.vm
      ResponseMappingTemplateS3Location: Graphql/Query-listJobsByPartitionKey-response.vm
      ApiId: !GetAtt API.ApiId
      FieldName: listJobsByPartitionKey
    DependsOn: APISchema
  APIMutationcreateJobResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Mutation
      DataSourceName: !GetAtt APIToKittyBoxDataSource.Name
      RequestMappingTemplateS3Location: Graphql/Mutation-createJob-request.vm
      ResponseMappingTemplateS3Location: Graphql/Mutation-createJob-response.vm
      ApiId: !GetAtt API.ApiId
      FieldName: createJob
    DependsOn: APISchema
  APIMutationdeleteJobResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      TypeName: Mutation
      DataSourceName: !GetAtt APIToKittyBoxDataSource.Name
      RequestMappingTemplateS3Location: Graphql/Mutation-deleteJob-request.vm
      ResponseMappingTemplateS3Location: Graphql/Mutation-deleteJob-response.vm
      ApiId: !GetAtt API.ApiId
      FieldName: deleteJob
    DependsOn: APISchema
  Enqueue:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Enqueue
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Enqueue
      CodeUri: src/Enqueue
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SQSSendMessagePolicy:
            QueueName: !GetAtt Queue.QueueName
      Environment:
        Variables:
          QUEUE_NAME: !GetAtt Queue.QueueName
          QUEUE_ARN: !GetAtt Queue.Arn
          QUEUE_URL: !Ref Queue
          QUEUE_REGION: !Ref AWS::Region
  Batcher:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Batcher
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Batcher
      CodeUri: src/Batcher
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  Deployer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Deployer
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Deployer
      CodeUri: src/Deployer
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 300
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref SiteBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref SiteBucket
          BUCKET_ARN: !GetAtt SiteBucket.Arn
          XDG_CONFIG_HOME: /tmp/.config
  DeployerDeployTrigger:
    Type: Custom::FunctionDeployTrigger
    Properties:
      ServiceToken: !GetAtt Deployer.Arn
      DeploymentTimestamp: !Ref DeploymentTimestamp
  Authenticator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Authenticator
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: Authenticator
      CodeUri: src/Authenticator
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  CognitoTriggered:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CognitoTriggered
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CognitoTriggered
      CodeUri: src/CognitoTriggered
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  UserPoolToCognitoTriggeredPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoTriggered.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
  BatcherPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-BatcherPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource: !Sub
              - ${batcherarn}
              - batcherarn: !GetAtt Batcher.Arn
  EnqueuePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-EnqueuePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource: !Sub
              - ${enqueuearn}
              - enqueuearn: !GetAtt Enqueue.Arn
  WorkerGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${AWS::StackName}-WorkerGroup
      ManagedPolicyArns:
        - !Ref WorkerPolicy
        - !Ref QueuePolicy
  WorkerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub ${AWS::StackName}-WorkerUser
  WorkerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-WorkerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource:
              - !GetAtt Batcher.Arn
              - !GetAtt Enqueue.Arn
  WorkerUserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref WorkerGroup
      Users:
        - !Ref WorkerUser
  WorkerUserKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref WorkerUser
  GGXAssetPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-GGXAssetPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource:
              - !GetAtt GGXBusinessAssociate.Arn
              - !GetAtt GGXDigitalLog.Arn
              - !GetAtt GGXDirectionalSurvey.Arn
              - !GetAtt GGXFormationTop.Arn
              - !GetAtt GGXLegalDescription.Arn
              - !GetAtt GGXProduction.Arn
              - !GetAtt GGXRasterLog.Arn
              - !GetAtt GGXStratColumn.Arn
              - !GetAtt GGXWellHeader.Arn
  GGXBusinessAssociate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXBusinessAssociate
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXBusinessAssociate
      CodeUri: src/assets/geographix/GGXBusinessAssociate
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXWellHeader:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXWellHeader
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXWellHeader
      CodeUri: src/assets/geographix/GGXWellHeader
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXDigitalLog:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXDigitalLog
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXDigitalLog
      CodeUri: src/assets/geographix/GGXDigitalLog
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXDirectionalSurvey:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXDirectionalSurvey
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXDirectionalSurvey
      CodeUri: src/assets/geographix/GGXDirectionalSurvey
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXFormationTop:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXFormationTop
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXFormationTop
      CodeUri: src/assets/geographix/GGXFormationTop
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXLegalDescription:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXLegalDescription
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXLegalDescription
      CodeUri: src/assets/geographix/GGXLegalDescription
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXProduction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXProduction
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXProduction
      CodeUri: src/assets/geographix/GGXProduction
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXRasterLog:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXRasterLog
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXRasterLog
      CodeUri: src/assets/geographix/GGXRasterLog
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  GGXStratColumn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GGXStratColumn
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GGXStratColumn
      CodeUri: src/assets/geographix/GGXStratColumn
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DeploymentTimestamp:
    Type: Number
    Description: Deployment preparation timestamp in milliseconds Since Epoch (injected by Stackery at deployment time)
Outputs:
  AccessKey:
    Value: !Ref WorkerUserKeys
    Description: AWSAccessKeyId
  SecretKey:
    Value: !GetAtt WorkerUserKeys.SecretAccessKey
    Description: AWSSecretAccessKey
